/**
 * Shared file between builds so that they can all use the same dependencies and
 * maven repositories.
 **/
ext.deps = [:]
def versions = [:]
versions.lifecycle = "2.2.0"
versions.materail = "1.1.0"
versions.card_view = '1.0.0'
versions.junit = "4.13"
versions.appcompt = "1.1.0"
versions.core_kotlin = "1.2.0"
versions.constraint_lay = "1.1.3"
versions.dagger = '2.27'
versions.coroutines = "1.3.5"
versions.kotlin = "1.3.70"
versions.glide = "4.11.0"
versions.nav_class = "2.3.0-alpha04"
versions.nav_component = "2.2.2"
versions.app_compat = "1.1.0"
versions.legacy_support = "1.0.0"
versions.gradle = '3.6.2'
versions.room_db = '2.2.5'
versions.retrofit = '2.7.1'
versions.okHttp_interceptor = '4.4.0'
versions.roboelectric = '4.3'
versions.test_runner = '1.2.0'
versions.test_core = '1.2.0'
versions.test_rule = '1.2.0'
versions.test_junit = '1.1.1'
versions.test_espresso = '3.2.0'
versions.test_navigation = '2.3.0-alpha06'
versions.fragment_test = '1.2.4'
ext.versions = versions


def deps = [:]

//appcompat
deps.app_compat = "androidx.appcompat:appcompat:$versions.appcompt"

//class path
def clspath = [:]
clspath.build_gradle = "com.android.tools.build:gradle:$versions.gradle"
clspath.nav_arg_plugin = "androidx.navigation:navigation-safe-args-gradle-plugin:$versions.nav_class"
clspath.ktx_gradle = "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
deps.clspath = clspath

//ktx core
deps.ktx_core = "androidx.core:core-ktx:$versions.core_kotlin"

//testImplementation
def testImpl = [:]
testImpl.roboelectric = "org.robolectric:robolectric:$versions.roboelectric"
testImpl.runner = "androidx.test:runner:$versions.test_runner"
testImpl.core = "androidx.test:core:$versions.test_core"
testImpl.rules = "androidx.test:rules:$versions.test_rule"
testImpl.junit = "androidx.test.ext:junit:$versions.test_junit"
testImpl.espresso_core = "androidx.test.espresso:espresso-core:$versions.test_espresso"
testImpl.espresso_contrib = "androidx.test.espresso:espresso-contrib:$versions.test_espresso"
//navigation component
testImpl.navigation = "androidx.navigation:navigation-testing:$versions.test_navigation"
deps.testImpl = testImpl

//fragment-testing
deps.fragment_test = "androidx.fragment:fragment-testing:$versions.fragment_test"

//constraint layout
deps.const_layout = "androidx.constraintlayout:constraintlayout:$versions.constraint_lay"

//ktx library
deps.ktx_stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"

//legacy
deps.lgcy = "androidx.legacy:legacy-support-v4:$versions.legacy_support"

//design
def design = [:]
design.material = "com.google.android.material:material:$versions.materail"
deps.design = design

//life cycle
def lifecycle = [:]
lifecycle.extensions = "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"
lifecycle.livedata = "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle"
lifecycle.viewmodel = "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"
lifecycle.runtime = "androidx.lifecycle:lifecycle-runtime-ktx:$versions.lifecycle"
lifecycle.common = "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
lifecycle.savedstate = "androidx.lifecycle:lifecycle-viewmodel-savedstate:$versions.lifecycle"
deps.lifecycle = lifecycle

//dagger2
def dagger = [:]
dagger.runtime = "com.google.dagger:dagger:$versions.dagger"
dagger.compiler = "com.google.dagger:dagger-compiler:$versions.dagger"
deps.dagger = dagger

//coroutine
def coroutines = [:]
coroutines.core = "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"
coroutines.android = "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"
deps.coroutines = coroutines

//navigation component
def nav = [:]
nav.fargment = "androidx.navigation:navigation-fragment-ktx:$versions.nav_component"
nav.ui = "androidx.navigation:navigation-ui-ktx:$versions.nav_component"
deps.nav = nav

//roomDb
def room = [:]
room.runtime = "androidx.room:room-runtime:$versions.room_db"
room.ktx = "androidx.room:room-ktx:$versions.room_db"
room.compiler = "androidx.room:room-compiler:$versions.room_db"
deps.room = room

// retrofit
def retrofit = [:]
retrofit.retrofit = "com.squareup.retrofit2:retrofit:$versions.retrofit"
retrofit.gson_convertor = "com.squareup.retrofit2:converter-gson:$versions.retrofit"
retrofit.interceptor = "com.squareup.okhttp3:logging-interceptor:$versions.okHttp_interceptor"
deps.retrofit = retrofit

//glide
def glide = [:]
glide.runtime = "com.github.bumptech.glide:glide:$versions.glide"
glide.compiler = "com.github.bumptech.glide:compiler:$versions.glide"
deps.glide = glide


ext.deps = deps

def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
}

ext.addRepos = this.&addRepos

